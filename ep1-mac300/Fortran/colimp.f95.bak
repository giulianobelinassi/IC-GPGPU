MODULE COLIMP
	IMPLICIT NONE
	CONTAINS
	INTEGER FUNCTION BACKCOL(A, b, trans)
		IMPLICIT NONE
		DOUBLE PRECISION, DIMENSION(:,:), INTENT(IN) :: A
		DOUBLE PRECISION, DIMENSION(:), INTENT(OUT) :: b
		LOGICAL, INTENT(IN) :: trans

		INTEGER :: j, n
		n = SIZE(A, 2)

		IF (trans) THEN
			DO j = n, 1, -1
				b(j) = b(j) - DOT_PRODUCT(A(j+1:n, j), b(j+1:n))
			ENDDO

			IF (A(j, j) == 0) THEN
				BACKCOL = -1
				RETURN
			ENDIF

			b(j) = b(j)/A(j, j)

		ELSE	
			DO j = n, 1, -1
				IF (A(j, j) == 0) THEN
					BACKCOL = -1
					RETURN
				ENDIF

				b(j) = b(j)/A(j, j)

				b(1:j-1) = b(1:j-1) - A(1:j-1, j)*b(j)
			ENDDO
		ENDIF
		BACKCOL = 0
	END FUNCTION BACKCOL

	INTEGER FUNCTION FORWCOL(A, b)
		IMPLICIT NONE
		DOUBLE PRECISION, DIMENSION(:,:), INTENT(IN) :: A
		DOUBLE PRECISION, DIMENSION(:), INTENT(OUT) :: b
		INTEGER :: j, n

		n = SIZE(A,2)

		DO j = 1, n
			IF (A(j, j) == 0) THEN
				FORWCOL = -1
				RETURN
			ENDIF
			
			b(j) = b(j)/A(j, j)
			b(j+1:n) = b(j+1:n) - A(j+1:n, j)*b(j)
		ENDDO
		FORWCOL = 0
	END FUNCTION FORWCOL

	INTEGER FUNCTION CHOLCOL(A)
		IMPLICIT NONE
		DOUBLE PRECISION, DIMENSION(:,:), INTENT(OUT) :: A
		INTEGER :: i, j, k, n

		n = SIZE(A, 2)

		DO j = 1, n
			DO k =1, j-1
				A(j:n, j) = A(j:n, j) - A(j:n, k)*A(j, k)
			ENDDO

			IF (A(j, j) <= 0) THEN
				CHOLCOL = -1
			ENDIF

			A(j, j) = SQRT(A(j, j))

			A(j+1:n, j) = A(j+1:n, j)/A(j, j)
		ENDDO
	END FUNCTION CHOLCOL
END MODULE COLIMP

!PROGRAM TEST
!	USE COLIMP
!	IMPLICIT NONE
!	DOUBLE PRECISION, DIMENSION(4,4) :: A
!	DOUBLE PRECISION, DIMENSION(4) :: b
!
!	INTEGER res
!
!	A = TRANSPOSE(RESHAPE((/ 4, -2,  4, 2, &
!				           -2, 10, -2,-7, &
!						    4, -2,  8, 4, &
!						    2, -7,  4, 7/), SHAPE(A)))
!	res = CHOLCOL(A)
!
!	PRINT *, A
!
!END PROGRAM TEST
